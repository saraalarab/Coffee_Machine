// Generated by gencpp from file coffeemachine/Check_QttyRequest.msg
// DO NOT EDIT!


#ifndef COFFEEMACHINE_MESSAGE_CHECK_QTTYREQUEST_H
#define COFFEEMACHINE_MESSAGE_CHECK_QTTYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coffeemachine
{
template <class ContainerAllocator>
struct Check_QttyRequest_
{
  typedef Check_QttyRequest_<ContainerAllocator> Type;

  Check_QttyRequest_()
    : check_type(0)
    , coffee_type()  {
    }
  Check_QttyRequest_(const ContainerAllocator& _alloc)
    : check_type(0)
    , coffee_type(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _check_type_type;
  _check_type_type check_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _coffee_type_type;
  _coffee_type_type coffee_type;





  typedef boost::shared_ptr< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Check_QttyRequest_

typedef ::coffeemachine::Check_QttyRequest_<std::allocator<void> > Check_QttyRequest;

typedef boost::shared_ptr< ::coffeemachine::Check_QttyRequest > Check_QttyRequestPtr;
typedef boost::shared_ptr< ::coffeemachine::Check_QttyRequest const> Check_QttyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coffeemachine::Check_QttyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coffeemachine::Check_QttyRequest_<ContainerAllocator1> & lhs, const ::coffeemachine::Check_QttyRequest_<ContainerAllocator2> & rhs)
{
  return lhs.check_type == rhs.check_type &&
    lhs.coffee_type == rhs.coffee_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coffeemachine::Check_QttyRequest_<ContainerAllocator1> & lhs, const ::coffeemachine::Check_QttyRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coffeemachine

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "597c14e188b8ce7d400f2cf2e78e2d96";
  }

  static const char* value(const ::coffeemachine::Check_QttyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x597c14e188b8ce7dULL;
  static const uint64_t static_value2 = 0x400f2cf2e78e2d96ULL;
};

template<class ContainerAllocator>
struct DataType< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coffeemachine/Check_QttyRequest";
  }

  static const char* value(const ::coffeemachine::Check_QttyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 check_type\n"
"string coffee_type\n"
;
  }

  static const char* value(const ::coffeemachine::Check_QttyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.check_type);
      stream.next(m.coffee_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Check_QttyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coffeemachine::Check_QttyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coffeemachine::Check_QttyRequest_<ContainerAllocator>& v)
  {
    s << indent << "check_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.check_type);
    s << indent << "coffee_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.coffee_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COFFEEMACHINE_MESSAGE_CHECK_QTTYREQUEST_H
